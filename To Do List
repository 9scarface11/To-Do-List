#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Function prototypes
void displayMenu();
void addTask(vector<string>& tasks);
void listTasks(const vector<string>& tasks);
void removeTask(vector<string>& tasks);

int main() {
    vector<string> tasks;
    int choice;

    do {
        displayMenu();
        cin >> choice;
        cin.ignore(); // Clear the input buffer

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                listTasks(tasks);
                break;
            case 3:
                removeTask(tasks);
                break;
            case 4:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please enter a number from 1 to 4.\n";
                break;
        }

    } while (choice != 4);

    return 0;
}

// Function to display the menu options
void displayMenu() {
    cout << "\n===== To-Do List Menu =====\n";
    cout << "1. Add Task\n";
    cout << "2. List Tasks\n";
    cout << "3. Remove Task\n";
    cout << "4. Exit\n";
    cout << "Enter your choice: ";
}

// Function to add a task to the list
void addTask(vector<string>& tasks) {
    string task;
    cout << "Enter task to add: ";
    getline(cin, task);
    tasks.push_back(task);
    cout << "Task added!\n";
}

// Function to list all tasks
void listTasks(const vector<string>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks to display.\n";
    } else {
        cout << "\n===== Tasks =====\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i] << endl;
        }
    }
}

// Function to remove a task from the list
void removeTask(vector<string>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks to remove.\n";
    } else {
        listTasks(tasks); // Display tasks for reference
        int index;
        cout << "Enter the index of the task to remove: ";
        cin >> index;

        if (index >= 1 && index <= static_cast<int>(tasks.size())) {
            tasks.erase(tasks.begin() + index - 1);
            cout << "Task removed!\n";
        } else {
            cout << "Invalid index. No task removed.\n";
        }
    }
}
